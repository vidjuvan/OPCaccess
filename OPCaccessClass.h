//=============================================================================
//
// file :         OPCaccessClass.h
//
// description :  Include for the OPCaccessClass root class.
//                This class is represents the singleton class for
//                the OPCaccess device class.
//                It contains all properties and methods which the 
//                OPCaccess requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author: andy_gotz $
//
// $Revision: 1.1 $
//
// $Log: not supported by cvs2svn $
// Revision 1.2  2005/09/06 16:26:07  meyer
// Ported to Tango%. Modified attribute structure!
//
// Revision 1.1.1.2  2005/07/12 06:59:37  peru
// Imported using TkCVS
//
// Revision 1.1.1.1  2004/11/08 09:21:08  meyer
// Imported using TkCVS
//
// Revision 1.2  2004/10/22 13:51:33  meyer
// *** empty log message ***
//
// Revision 1.1  2004/10/20 11:42:34  meyer
// Initial revision
//
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _OPCACCESSCLASS_H
#define _OPCACCESSCLASS_H

#include <tango.h>
#include <OPCaccess.h>
#include <objbase.h>

namespace OPCaccess_ns
{
//=====================================
//	Define classes for attributes
//=====================================
//=========================================
//	Define classes for commands
//=========================================
class ReadDirectCmd : public Tango::Command
{
public:
	ReadDirectCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ReadDirectCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ReadDirectCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<OPCaccess *>(dev))->is_ReadDirect_allowed(any);}
};



class ReadCacheCmd : public Tango::Command
{
public:
	ReadCacheCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ReadCacheCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ReadCacheCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<OPCaccess *>(dev))->is_ReadCache_allowed(any);}
};



//
// The OPCaccessClass singleton definition
//

class OPCaccessClass : public Tango::DeviceClass
{
public:

//	add your own data members here
//------------------------------------

private:
	static void OLE_init();

public:
	Tango::DbData	cl_prop;

//	Method prototypes
	static OPCaccessClass *init(const char *);
	static OPCaccessClass *instance();
	~OPCaccessClass();
	Tango::DbDatum	get_class_property(string &);
	
protected:
	OPCaccessClass(string &);
	static OPCaccessClass *_instance;
	void command_factory();
	void write_class_property();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace OPCaccess_ns

#endif // _OPCACCESSCLASS_H
