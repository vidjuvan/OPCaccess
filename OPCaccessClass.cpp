
//+=============================================================================
//
// file :        OPCaccessClass.cpp
//
// description : C++ source for the OPCaccessClass. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the OPCaccess once per process.
//
// project :     TANGO Device Server
//
// $Author: andy_gotz $
//
// $Revision: 1.1 $
//
// $Log: not supported by cvs2svn $
// Revision 1.2  2005/09/06 16:26:07  meyer
// Ported to Tango%. Modified attribute structure!
//
// Revision 1.3  2004/10/22 13:51:13  meyer
// Tested Version
//
// Revision 1.2  2004/10/20 12:45:57  meyer
// *** empty log message ***
//
// Revision 1.1  2004/10/20 11:42:13  meyer
// Initial revision
//
//
// copyleft :   European Synchrotron Radiation Facility
//              BP 220, Grenoble 38043
//              FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#include "StdAfx.h"
#include <objbase.h>

static const char *TagName   = "$Name: not supported by cvs2svn $";
static const char *HttpServer= "http://www.esrf.fr/computing/cs/tango/tango_doc/ds_doc/";
static const char *RcsId = "$Header: /users/chaize/newsvn/cvsroot/Communication/OPCaccess/src/OPCaccessClass.cpp,v 1.1 2008-08-06 16:04:29 andy_gotz Exp $";


#include <OPCaccess.h>
#include <OPCaccessClass.h>

namespace OPCaccess_ns
{


//+----------------------------------------------------------------------------
//
// method : 		ReadCacheCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ReadCacheCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "ReadCacheCmd::execute(): arrived" << endl;

	((static_cast<OPCaccess *>(device))->read_cache());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		ReadDirectCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ReadDirectCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "ReadDirectCmd::execute(): arrived" << endl;

	((static_cast<OPCaccess *>(device))->read_direct());
	return new CORBA::Any();
}

//
//----------------------------------------------------------------
//	Initialize pointer for singleton pattern
//----------------------------------------------------------------
//
OPCaccessClass *OPCaccessClass::_instance = NULL;

//+----------------------------------------------------------------------------
//
// method : 		OPCaccessClass::OPCaccessClass(string &s)
// 
// description : 	constructor for the OPCaccessClass
//
// in : - s : The class name
//
//-----------------------------------------------------------------------------
OPCaccessClass::OPCaccessClass(string &s):DeviceClass(s)
{

	cout2 << "Entering OPCaccessClass constructor" << endl;
	write_class_property();
	
	cout2 << "Leaving OPCaccessClass constructor" << endl;

}
//+----------------------------------------------------------------------------
//
// method : 		OPCaccessClass::~OPCaccessClass()
// 
// description : 	destructor for the OPCaccessClass
//
//-----------------------------------------------------------------------------
OPCaccessClass::~OPCaccessClass()
{
	_instance = NULL;
}

//+----------------------------------------------------------------------------
//
// method : 		OPCaccessClass::instance
// 
// description : 	Create the object if not already done. Otherwise, just
//			return a pointer to the object
//
// in : - name : The class name
//
//-----------------------------------------------------------------------------
OPCaccessClass *OPCaccessClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new OPCaccessClass(s);
		}
		catch (bad_alloc)
		{
			throw;
		}		
	}	
	
	// Watch out!!! This might get lost when genrating code with Pogo!!!
	// Initialise OLE once for all objects	
	OLE_init();

	return _instance;
}

OPCaccessClass *OPCaccessClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}

//+----------------------------------------------------------------------------
//
// method : 		OPCaccessClass::command_factory
// 
// description : 	Create the command object(s) and store them in the 
//			command list
//
//-----------------------------------------------------------------------------
void OPCaccessClass::command_factory()
{
	command_list.push_back(new ReadCacheCmd("ReadCache",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new ReadDirectCmd("ReadDirect",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));

	//	add polling if any
	for (unsigned int i=0 ; i<command_list.size(); i++)
	{
	}
}

//+----------------------------------------------------------------------------
//
// method : 		OPCaccessClass::get_class_property
// 
// description : 	Get the class property for specified name.
//
// in :		string	name : The property name
//
//+----------------------------------------------------------------------------
Tango::DbDatum OPCaccessClass::get_class_property(string &prop_name)
{
	for (int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		OPCaccessClass::device_factory
// 
// description : 	Create the device object(s) and store them in the 
//			device list
//
// in :		Tango::DevVarStringArray *devlist_ptr : The device name list
//
//-----------------------------------------------------------------------------
void OPCaccessClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{

	//	Create all devices.(Automatic code generation)
	//-------------------------------------------------------------
	for (unsigned long i=0 ; i < devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
						
		// Create devices and add it into the device list
		//----------------------------------------------------
		device_list.push_back(new OPCaccess(this, (*devlist_ptr)[i]));							 

		// Export device to the outside world
		// Check before if database used.
		//---------------------------------------------
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(device_list.back());
		else
			export_device(device_list.back(), (*devlist_ptr)[i]);
	}
	//	End of Automatic code generation
	//-------------------------------------------------------------
	
	for (unsigned long i=0 ; i < devlist_ptr->length() ; i++)
	{
		// Call the start() method after the initialisation of the 
		// device to created an attribute only for the device!
		//
		
		(static_cast <OPCaccess *> (device_list[i]))->start();
	}	
}
//+----------------------------------------------------------------------------
//
// method : 		OPCaccessClass::write_class_property
// 
// description : 	Set class description as property in database
//
//-----------------------------------------------------------------------------
void OPCaccessClass::write_class_property()
{
	//	First time, check if database used
	//--------------------------------------------
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("A generic class to access OPC servers");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("The OPCaccess class maps data items from an OPC server to Tango");
	str_desc.push_back("attributes. For every OPCaccess device the attibute data type has");
	str_desc.push_back("to be specified. Tango can handle only double, long and short attributes.");
	str_desc.push_back("All OPC data items are casted to the requested data type.");
	str_desc.push_back("If an OPC item is an array (uses the ,lxx) extension in the item name,");
	str_desc.push_back("the tango attribute is created as a spectrum attibute.");
	str_desc.push_back("");
	str_desc.push_back("For OPC servers which cannot handle array types, the property");
	str_desc.push_back("\"array_handling\" must be set to false to trigger correct data conversion.");
	description << str_desc;
	data.push_back(description);
		
	//	put cvs location
	string	rcsId(RcsId);
	string	filename(classname);
	start = rcsId.find("/");
	if (start!=string::npos)
	{
		filename += "Class.cpp";
		end   = rcsId.find(filename);
		if (end>start)
		{
			string	strloc = rcsId.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}

	//	Get CVS tag revision
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	end   = tagname.find(endstr);
	if (end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	doc_url("doc_url");
		doc_url << httpServ;
		data.push_back(doc_url);
	}

	//	Call database and and values
	//--------------------------------------------
	get_db_class()->put_property(data);
}


//+----------------------------------------------------------------------------
//
// method : 		OPCaccessClass::OLE_init
// 
// description : 	Intialise Afx and OLE access
//
//-----------------------------------------------------------------------------
void OPCaccessClass::OLE_init()
{
#ifdef _CONSOLE
	//
	// initialize MFC and print an error on failure
	
	if (!AfxWinInit(::GetModuleHandle(NULL), NULL, ::GetCommandLine(), 0))
		{
		cout1 << _T("Fatal Error: MFC initialization failed") << endl;
		return S_FALSE;
		}
#endif //_CONSOLE

	HRESULT	hr;
	if   ((hr=CoInitializeEx(NULL, COINIT_MULTITHREADED))==RPC_E_CHANGED_MODE)
		{
		cout1 << "	CoInitialize(NULL) failed ! err: " << hr << endl;
		TangoSys_MemStream out_stream;
		out_stream << "CoInitialize(NULL) failed ! err: " << hr << ends;
		Tango::Except::throw_exception(
						(const char *)"UNABLE_TO_INIT_OLE",
						out_stream.str(),
						(const char *)"OPCaccess::AppInit()");
		}
}


}	// namespace
